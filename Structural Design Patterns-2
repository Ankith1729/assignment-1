interface Coffee {
    int cost();
}

class BasicCoffee implements Coffee {
    @Override
    public int cost() {
        return 5;
    }
}

class MilkDecorator implements Coffee {
    private Coffee coffee;

    public MilkDecorator(Coffee coffee) {
        this.coffee = coffee;
    }

    @Override
    public int cost() {
        return coffee.cost() + 2;
    }
}

class SugarDecorator implements Coffee {
    private Coffee coffee;

    public SugarDecorator(Coffee coffee) {
        this.coffee = coffee;
    }

    @Override
    public int cost() {
        return coffee.cost() + 1;
    }
}

public class DecoratorPatternDemo {
    public static void main(String[] args) {
        Coffee basicCoffee = new BasicCoffee();
        Coffee coffeeWithMilk = new MilkDecorator(basicCoffee);
        Coffee coffeeWithMilkAndSugar = new SugarDecorator(coffeeWithMilk);

        System.out.println("Cost of coffee with milk and sugar: " + coffeeWithMilkAndSugar.cost());
    }
}
